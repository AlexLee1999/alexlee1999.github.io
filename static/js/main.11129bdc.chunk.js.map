{"version":3,"sources":["logo.svg","image.js","card.js","head.js","rating.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ImageExampleImage","Image","src","size","Intro","class","ModalExampleTopAligned","React","useState","open","setOpen","Modal","centered","onClose","onOpen","trigger","Button","Header","Content","Description","Actions","onClick","RatingHeart","Rating","icon","defaultRating","maxRating","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,kICO5BC,EAJW,kBACxB,kBAACC,EAAA,EAAD,CAAOC,IAAI,kFAAkFC,KAAK,WCmCrFC,EArCD,WACV,OACI,yBAAKC,MAAM,WACjB,yBAAKA,MAAM,WACT,yBAAKA,MAAM,UAAX,6BACA,kBAAC,EAAD,OAEF,yBAAKA,MAAM,WACT,wBAAIA,MAAM,iBAAV,aACA,yBAAKA,MAAM,iBACT,yBAAKA,MAAM,SACT,yBAAKA,MAAM,WACT,yBAAKA,MAAM,WAAX,2BAKJ,yBAAKA,MAAM,SACT,yBAAKA,MAAM,WACT,yBAAKA,MAAM,WAAX,2BAKJ,yBAAKA,MAAM,SACT,yBAAKA,MAAM,WACT,yBAAKA,MAAM,WAAX,+B,0BCDKC,MAxBf,WAAmC,IAAD,EACRC,IAAMC,UAAS,GADP,mBACzBC,EADyB,KACnBC,EADmB,KAGhC,OACE,kBAACC,EAAA,EAAD,CACEC,UAAU,EACVH,KAAMA,EACNI,QAAS,kBAAMH,GAAQ,IACvBI,OAAQ,kBAAMJ,GAAQ,IACtBK,QAAS,kBAACC,EAAA,EAAD,2BAET,kBAACL,EAAA,EAAMM,OAAP,mBACA,kBAACN,EAAA,EAAMO,QAAP,KACE,kBAACP,EAAA,EAAMQ,YAAP,gCAIF,kBAACR,EAAA,EAAMS,QAAP,KACE,kBAACJ,EAAA,EAAD,CAAQK,QAAS,kBAAMX,GAAQ,KAA/B,S,SCdOY,EAJK,kBAClB,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQC,cAAe,EAAGC,UAAW,KCiBrCC,MAZf,WACE,OACE,6BAEE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,OCHcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.11129bdc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport { Image } from 'semantic-ui-react'\n\nconst ImageExampleImage = () => (\n  <Image src='https://img.ltn.com.tw/Upload/playing/page/2019/08/21/190821-20902-01-B8vUe.jpg' size='small' />\n)\n\nexport default ImageExampleImage","import React from 'react'\nimport ImageExampleImage from './image.js'\nconst Intro = () =>{\n    return(\n        <div class=\"ui card\">\n  <div class=\"content\">\n    <div class=\"header\">李俊諺 | Alex</div>\n    <ImageExampleImage />\n  </div>\n  <div class=\"content\">\n    <h4 class=\"ui sub header\">b06203017</h4>\n    <div class=\"ui small feed\">\n      <div class=\"event\">\n        <div class=\"content\">\n          <div class=\"summary\">\n             Department of EE, NTU\n          </div>\n        </div>\n      </div>\n      <div class=\"event\">\n        <div class=\"content\">\n          <div class=\"summary\">\n             Favorite food : PIZZA\n          </div>\n        </div>\n      </div>\n      <div class=\"event\">\n        <div class=\"content\">\n          <div class=\"summary\">\n             Birthday : 1999/06/03\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n    )\n}\n\nexport default Intro;","import React from 'react'\nimport { Button, Modal } from 'semantic-ui-react'\n\nfunction ModalExampleTopAligned() {\n  const [open, setOpen] = React.useState(false)\n\n  return (\n    <Modal\n      centered={false}\n      open={open}\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n      trigger={<Button>Like the Website?</Button>}\n    >\n      <Modal.Header>Thank you!</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          Don't forget to rate!!\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button onClick={() => setOpen(false)}>OK</Button>\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\nexport default ModalExampleTopAligned","import React from 'react'\nimport { Rating } from 'semantic-ui-react'\n\nconst RatingHeart = () => (\n  <Rating icon='heart' defaultRating={1} maxRating={5} />\n)\n\nexport default RatingHeart","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Intro from './card.js'\nimport ModalExampleTopAligned from './head.js'\nimport RatingHeart from './rating.js'\n\n\n\nfunction App() {\n  return (\n    <div>\n      \n      <Intro />\n      <ModalExampleTopAligned />\n      <RatingHeart />\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}